#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø WEMOS D1 MINI ==========
const char* ssid = "Galaxy A51B860";
const char* password = "gfifgfif";
const char* mqtt_server = "10.164.154.6";
const int mqtt_port = 1883;

// –ü–∏–Ω—ã Wemos D1 Mini (–æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç NodeMCU!)
const int LED_PIN = LED_BUILTIN;  // D4 (GPIO2) - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π LED
const int BUTTON_PIN = D3;        // GPIO0
const int SENSOR_PIN = A0;        // –ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—Ö–æ–¥

// ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô ID ==========
String device_id;
String device_type = "sensor";
String base_topic;

WiFiClient espClient;
PubSubClient client(espClient);

// ========== –£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø ID ==========
String generateDeviceID() {
  String mac = WiFi.macAddress();
  mac.replace(":", "");
  String id = "WEMOS_" + mac;  // –ü—Ä–µ—Ñ–∏–∫—Å WEMOS –≤–º–µ—Å—Ç–æ ESP
  return id;
}

void createTopics() {
  base_topic = "devices/" + device_id;
  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

// ========== –ù–ê–°–¢–†–û–ô–ö–ê WIFI ==========
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("üì∂ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(500);
    Serial.print(".");
    attempts++;
    digitalWrite(LED_PIN, !digitalRead(LED_PIN)); // –ú–∏–≥–∞–µ–º LED
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("");
    Serial.println("‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω");
    Serial.print("üì° IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
    Serial.print("üîë MAC –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.macAddress());
    digitalWrite(LED_PIN, HIGH); // Wemos: HIGH = LED OFF
    return true;
  } else {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi");
    return false;
  }
}

// ========== MQTT CALLBACK ==========
void callback(char* topic, byte* payload, unsigned int length) {
  // ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

// ========== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï MQTT ==========
void reconnect() {
  // ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

// ========== –û–¢–ü–†–ê–í–ö–ê –°–¢–ê–¢–£–°–ê ==========
void sendStatus() {
  DynamicJsonDocument doc(1024);
  
  doc["device_id"] = device_id;
  doc["type"] = device_type;
  doc["ip"] = WiFi.localIP().toString();
  doc["mac"] = WiFi.macAddress();
  doc["rssi"] = WiFi.RSSI();
  doc["free_heap"] = ESP.getFreeHeap();
  doc["uptime"] = millis();
  doc["board"] = "Wemos D1 Mini";  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ
  doc["version"] = "3.0";
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  if (client.connected()) {
    client.publish(status_topic.c_str(), jsonString.c_str());
    Serial.println("üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
  }
}

// ========== SETUP ==========
void setup() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, HIGH); // Wemos: HIGH = LED OFF
  
  Serial.begin(115200);
  delay(1000);
  
  Serial.println();
  Serial.println("üöÄ WEMOS D1 MINI MQTT Client v3.0");
  Serial.println("=================================");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WiFi
  if (!setup_wifi()) {
    Serial.println("üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å WiFi...");
    delay(3000);
    ESP.restart();
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∏ —Ç–æ–ø–∏–∫–æ–≤
  device_id = generateDeviceID();
  createTopics();
  
  Serial.println();
  Serial.println("üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø WEMOS:");
  Serial.println("   ID: " + device_id);
  Serial.println("   MQTT: " + String(mqtt_server) + ":" + String(mqtt_port));
  Serial.println("   –ë–∞–∑–æ–≤—ã–π —Ç–æ–ø–∏–∫: " + base_topic);
  Serial.println();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  client.setBufferSize(2048);
  
  delay(2000);
  Serial.println("‚úÖ Wemos D1 Mini –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
}

// ========== MAIN LOOP ==========
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
  static unsigned long lastStatus = 0;
  if (millis() - lastStatus > 30000) {
    lastStatus = millis();
    sendStatus();
    
    Serial.print("üíæ Heap: ");
    Serial.print(ESP.getFreeHeap());
    Serial.print(" | üì∂ RSSI: ");
    Serial.println(WiFi.RSSI());
  }
  
  // –ú–∏–≥–∞–Ω–∏–µ LED –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–∏–Ω–≤–µ—Ä—Å–∏—è –¥–ª—è Wemos)
  static unsigned long lastBlink = 0;
  if (client.connected() && millis() - lastBlink > 1000) {
    lastBlink = millis();
    digitalWrite(LED_PIN, !digitalRead(LED_PIN)); // –ò–Ω–≤–µ—Ä—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞
  }
  
  delay(100);
}