class ESPDeviceManager {
    constructor() {
        this.devices = new Map();
        this.systemStatus = {
            mqtt: false,
            webserver: true,
            uptime: 0
        };
        this.init();
    }

    init() {
        this.loadDevices();
        this.startAutoRefresh();
        this.updateSystemStatus();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setInterval(() => {
            this.systemStatus.uptime++;
            this.updateUptimeDisplay();
        }, 1000);
    }

    async loadDevices() {
        try {
            const response = await fetch('/api/devices');
            const data = await response.json();
            
            if (data.status === 'success') {
                this.updateDevicesDisplay(data.devices);
                this.updateStats(data.stats);
                this.systemStatus.mqtt = true;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
            this.systemStatus.mqtt = false;
        }
        
        this.updateSystemStatus();
    }

    updateDevicesDisplay(devices) {
        const devicesList = document.getElementById('devices-list');
        if (!devicesList) return;

        if (devices.length === 0) {
            devicesList.innerHTML = '<div class="no-devices">üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</div>';
            return;
        }

        devicesList.innerHTML = devices.map(device => `
            <div class="device-card">
                <div class="device-header">
                    <div class="device-name">${device.id}</div>
                    <div class="device-type">${this.getDeviceTypeIcon(device.type)} ${device.type}</div>
                </div>
                
                <div class="device-details">
                    <div class="detail-item">
                        <span>–°—Ç–∞—Ç—É—Å:</span>
                        <strong style="color: ${device.status === 'connected' ? '#27ae60' : '#e74c3c'}">
                            ${device.status === 'connected' ? '‚úÖ –û–Ω–ª–∞–π–Ω' : '‚ùå –û—Ñ–ª–∞–π–Ω'}
                        </strong>
                    </div>
                    <div class="detail-item">
                        <span>IP –∞–¥—Ä–µ—Å:</span>
                        <strong>${device.ip}</strong>
                    </div>
                    <div class="detail-item">
                        <span>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
                        <strong>${this.formatTime(device.last_seen)}</strong>
                    </div>
                </div>

                <div class="device-actions">
                    <button class="btn btn-primary" onclick="deviceManager.sendDeviceCommand('${device.id}', 'STATUS')">
                        üì° –°—Ç–∞—Ç—É—Å
                    </button>
                    <button class="btn btn-secondary" onclick="deviceManager.sendDeviceCommand('${device.id}', 'RESTART')">
                        üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
                    </button>
                    <button class="btn btn-info" onclick="deviceManager.showDeviceDetails('${device.id}')">
                        ‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                    </button>
                </div>
            </div>
        `).join('');
    }

    updateStats(stats) {
        const totalEl = document.getElementById('total-devices');
        const onlineEl = document.getElementById('online-devices');
        const typesEl = document.getElementById('device-types');
        
        if (totalEl) totalEl.textContent = stats.total;
        if (onlineEl) onlineEl.textContent = stats.online;
        if (typesEl) typesEl.textContent = Object.keys(stats.by_type).length;
    }

    updateSystemStatus() {
        const statusIndicator = document.getElementById('status-indicator');
        const statusText = document.getElementById('status-text');
        
        if (statusIndicator && statusText) {
            if (this.systemStatus.mqtt && this.systemStatus.webserver) {
                statusIndicator.style.background = '#27ae60';
                statusText.textContent = '‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ';
            } else {
                statusIndicator.style.background = '#e74c3c';
                statusText.textContent = '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º';
            }
        }
    }

    updateUptimeDisplay() {
        const uptimeEl = document.getElementById('uptime');
        if (uptimeEl) {
            const hours = Math.floor(this.systemStatus.uptime / 3600);
            const minutes = Math.floor((this.systemStatus.uptime % 3600) / 60);
            const seconds = this.systemStatus.uptime % 60;
            uptimeEl.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
    }

    getDeviceTypeIcon(type) {
        const icons = {
            'rgb': 'üé®',
            'sensor': 'üìä',
            'switch': 'üîå',
            'mixer': 'üîÑ',
            'unknown': '‚ùì'
        };
        return icons[type] || 'üì±';
    }

    formatTime(timestamp) {
        const now = Date.now() / 1000;
        const diff = now - timestamp;
        
        if (diff < 60) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diff < 3600) return `${Math.floor(diff / 60)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (diff < 86400) return `${Math.floor(diff / 3600)} —á –Ω–∞–∑–∞–¥`;
        
        return new Date(timestamp * 1000).toLocaleString();
    }

    async sendDeviceCommand(deviceId, command) {
        try {
            const response = await fetch(`/api/device/${deviceId}/command`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({command: command})
            });
            
            const data = await response.json();
            this.showNotification(data.message, data.status);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã', 'error');
        }
    }

    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    startAutoRefresh() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.loadDevices();
        }, 5000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function refreshDevices() {
    if (window.deviceManager) {
        deviceManager.loadDevices();
        deviceManager.showNotification('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è...', 'info');
    }
}

function discoverDevices() {
    if (window.deviceManager) {
        deviceManager.showNotification('–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...', 'info');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å broadcast –∑–∞–ø—Ä–æ—Å
        refreshDevices();
    }
}

function shutdownSystem() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã?\n\n–í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω—ã.')) {
        fetch('/api/shutdown', {method: 'POST'})
            .then(() => {
                alert('–°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...');
                window.close();
            })
            .catch(() => {
                alert('–°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ.');
                window.close();
            });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let deviceManager;
document.addEventListener('DOMContentLoaded', function() {
    deviceManager = new ESPDeviceManager();
});