import subprocess
import os
import time
import socket
import sys

def get_resource_path(relative_path):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)"""
    if hasattr(sys, '_MEIPASS'):
        base_path = sys._MEIPASS
    else:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

class MQTTBroker:
    def __init__(self):
        self.process = None
        self.is_running = False
        
    def start_broker(self):
        """–ó–∞–ø—É—Å–∫ MQTT –±—Ä–æ–∫–µ—Ä–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
            if self._is_port_in_use(1883):
                print("‚ö†Ô∏è MQTT –ø–æ—Ä—Ç —É–∂–µ –∑–∞–Ω—è—Ç, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –±—Ä–æ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                self.is_running = True
                return True
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ
            mosquitto_path = get_resource_path("mosquitto.exe")
            config_path = get_resource_path("mosquitto.conf")
            
            print(f"üîß –ü–æ–∏—Å–∫ mosquitto: {mosquitto_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(mosquitto_path):
                print(f"‚ùå –§–∞–π–ª mosquitto.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {mosquitto_path}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not os.path.exists(config_path):
                print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞...")
                with open(config_path, 'w') as f:
                    f.write("listener 1883 0.0.0.0\nallow_anonymous true\n")
            
            print("üöÄ –ó–∞–ø—É—Å–∫ MQTT –±—Ä–æ–∫–µ—Ä–∞...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
            startupinfo = None
            if os.name == 'nt':
                startupinfo = subprocess.STARTUPINFO()
                startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                startupinfo.wShowWindow = 0  # SW_HIDE - —Å–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º mosquitto (–ø—Ä–æ—â–µ, –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
            self.process = subprocess.Popen([
                mosquitto_path, 
                "-c", config_path,
                "-p", "1883"
            ], 
            stdout=subprocess.DEVNULL, 
            stderr=subprocess.DEVNULL,
            startupinfo=startupinfo)
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –±—Ä–æ–∫–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self.process.poll() is None:
                self.is_running = True
                print("‚úÖ MQTT –±—Ä–æ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 1883")
                return True
            else:
                print("‚ùå MQTT –±—Ä–æ–∫–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MQTT –±—Ä–æ–∫–µ—Ä–∞: {e}")
            return False
    
    def stop_broker(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ MQTT –±—Ä–æ–∫–µ—Ä–∞"""
        try:
            if self.process and self.process.poll() is None:
                self.process.terminate()
                self.process.wait(timeout=5)
                print("‚úÖ MQTT –±—Ä–æ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.is_running = False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MQTT –±—Ä–æ–∫–µ—Ä–∞: {e}")
            if self.process:
                self.process.kill()
    
    def _is_port_in_use(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            return s.connect_ex(('localhost', port)) == 0