#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <EEPROM.h>

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
String AP_SSID;  // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const char* AP_PASSWORD = "12345678"; // –ü–∞—Ä–æ–ª—å —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ WiFi
struct WiFiSettings {
  char ssid[32];
  char password[64];
  bool configured;
};

WiFiSettings wifiSettings;

// –ü–∏–Ω—ã
const int CONFIG_BUTTON_PIN = D3;     // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const int STATUS_LED = LED_BUILTIN;
const int ACTION_BUTTON_PIN = D1;    // –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞
const int RGB_RED_PIN = D5;          // RGB –∫—Ä–∞—Å–Ω—ã–π
const int RGB_GREEN_PIN = D6;        // RGB –∑–µ–ª–µ–Ω—ã–π  
const int RGB_BLUE_PIN = D7;         // RGB —Å–∏–Ω–∏–π

// ========== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ==========
bool actionButtonPressed = false;
int currentRed = 0;
int currentGreen = 0;
int currentBlue = 0;
bool isLedOn = true;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∂–∏–º–æ–≤
bool configMode = false;
bool isConfigured = false;
unsigned long buttonPressTime = 0;
bool buttonActive = false;
const unsigned long CONFIG_BUTTON_TIME = 5000; // 5 —Å–µ–∫—É–Ω–¥ —É–¥–µ—Ä–∂–∞–Ω–∏—è

// MQTT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
String mqtt_server = "";
const int mqtt_port = 1883;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ID
String device_id;
//String device_type = "sensor";
String device_type = "rgb_controller";

// MQTT —Ç–æ–ø–∏–∫–∏
String status_topic;
String data_topic;
String command_topic;
String disconnect_topic;
String error_topic;

// –û–±—ä–µ–∫—Ç—ã
WiFiClient espClient;
PubSubClient client(espClient);
WiFiServer configServer(80);

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ MQTT
bool mqttSearchInProgress = false;
unsigned long lastMQTTSearch = 0;
int currentScanIP = 1;
IPAddress network;
IPAddress commonIPs[9] = {
  IPAddress(192,168,1,100),
  IPAddress(192,168,0,100),
  IPAddress(192,168,1,1),
  IPAddress(192,168,0,1),
  IPAddress(10,0,0,100),
  IPAddress(172,16,0,100),
  IPAddress(0,0,0,0), // –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ–∑–∂–µ
  IPAddress(0,0,0,0), // –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ–∑–∂–µ
  IPAddress(0,0,0,0)  // –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ–∑–∂–µ
};
int commonIPIndex = 0;
bool commonIPsInitialized = false;

// ========== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° EEPROM ==========
void saveWiFiSettings() {
  EEPROM.begin(512);
  EEPROM.put(0, wifiSettings);
  EEPROM.commit();
  EEPROM.end();
  Serial.println("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WiFi —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ EEPROM");
}

void loadWiFiSettings() {
  EEPROM.begin(512);
  EEPROM.get(0, wifiSettings);
  EEPROM.end();
  
  if (!wifiSettings.configured) {
    Serial.println("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WiFi –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è");
    configMode = true;
  } else {
    Serial.println("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WiFi –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ EEPROM");
    Serial.print("üì∂ SSID: ");
    Serial.println(wifiSettings.ssid);
    isConfigured = true;
  }
}

// ========== –ì–ï–ù–ï–†–ê–¶–ò–Ø ID ==========
String generateDeviceID() {
  String mac = WiFi.macAddress();
  mac.replace(":", "");
  String id = "ESP_" + mac.substring(6);
  return id;
}

void createTopics() {
  status_topic = "devices/" + device_id + "/status";
  data_topic = "devices/" + device_id + "/data";
  command_topic = "devices/" + device_id + "/command";
  disconnect_topic = "devices/" + device_id + "/disconnect";
  error_topic = "devices/" + device_id + "/error";
}

// ========== –†–ï–ñ–ò–ú –¢–û–ß–ö–ò –î–û–°–¢–£–ü–ê ==========
void startConfigMode() {
  configMode = true;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  AP_SSID = "ESP_Config_" + device_id;
  
  Serial.println("üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...");
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MQTT –∏ WiFi –∫–ª–∏–µ–Ω—Ç
  client.disconnect();
  WiFi.disconnect();
  delay(1000);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞
  WiFi.mode(WIFI_AP);
  WiFi.softAP(AP_SSID.c_str(), AP_PASSWORD);
  
  Serial.println("üì° –¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–ø—É—â–µ–Ω–∞:");
  Serial.print("   SSID: ");
  Serial.println(AP_SSID);
  Serial.print("   –ü–∞—Ä–æ–ª—å: ");
  Serial.println(AP_PASSWORD);
  Serial.print("   IP –∞–¥—Ä–µ—Å: ");
  Serial.println(WiFi.softAPIP());
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  configServer.begin();
  Serial.println("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 80");
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  digitalWrite(STATUS_LED, LOW); // LED –≤–∫–ª—é—á–µ–Ω
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ MQTT
  mqttSearchInProgress = false;
}

// ========== –í–ï–ë-–°–ï–†–í–ï–† –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ==========
void handleConfigWebServer() {
  WiFiClient client = configServer.available();
  if (!client) return;
  
  Serial.println("üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
  
  String request = client.readStringUntil('\r');
  client.flush();
  
  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if (request.indexOf("GET / ") != -1) {
    String html = "<!DOCTYPE html><html><head><title>ESP WiFi Config</title><meta charset='UTF-8'>";
    html += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
    html += "<style>";
    html += "body{font-family:Arial,sans-serif;max-width:500px;margin:40px auto;padding:20px;background:#f5f5f5;}";
    html += ".container{background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}";
    html += "h2{color:#333;text-align:center;margin-bottom:30px;}";
    html += "input{width:100%;padding:12px;margin:8px 0;border:1px solid #ddd;border-radius:5px;font-size:16px;}";
    html += "button{width:100%;padding:12px;background:#007cba;color:white;border:none;border-radius:5px;font-size:16px;cursor:pointer;margin-top:10px;}";
    html += "button:hover{background:#005a87;}";
    html += ".device-info{background:#e8f4fd;padding:15px;border-radius:5px;margin-bottom:20px;text-align:center;}";
    html += "</style></head>";
    html += "<body><div class='container'>";
    html += "<div class='device-info'>";
    html += "<strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: " + device_id + "</strong><br>";
    html += "IP: " + WiFi.softAPIP().toString();
    html += "</div>";
    html += "<h2>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi</h2>";
    html += "<form method='POST' action='/save'>";
    html += "<input type='text' name='ssid' placeholder='SSID WiFi —Å–µ—Ç–∏' required>";
    html += "<input type='password' name='password' placeholder='–ü–∞—Ä–æ–ª—å WiFi' required>";
    html += "<button type='submit'>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</button>";
    html += "</form>";
    html += "</div></body></html>";
    
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html; charset=utf-8");
    client.println("Connection: close");
    client.println();
    client.println(html);
  }
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  else if (request.indexOf("POST /save") != -1) {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    String body = "";
    while (client.available()) {
      body += client.readStringUntil('\r');
    }
    
    if (body.indexOf("ssid=") != -1) {
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
      int ssidStart = body.indexOf("ssid=") + 5;
      int ssidEnd = body.indexOf("&", ssidStart);
      String ssid = body.substring(ssidStart, ssidEnd);
      ssid.replace("+", " ");
      ssid = urlDecode(ssid);
      
      int passStart = body.indexOf("password=") + 9;
      String password = body.substring(passStart);
      password.replace("+", " ");
      password = urlDecode(password);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      ssid.toCharArray(wifiSettings.ssid, 32);
      password.toCharArray(wifiSettings.password, 64);
      wifiSettings.configured = true;
      saveWiFiSettings();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      String html = "<!DOCTYPE html><html><head><meta charset='UTF-8'><meta http-equiv='refresh' content='5;url=/'>";
      html += "<style>body{font-family:Arial,sans-serif;text-align:center;margin-top:50px;background:#f5f5f5;}";
      html += ".container{background:white;padding:30px;border-radius:10px;max-width:500px;margin:0 auto;}</style></head>";
      html += "<body><div class='container'>";
      html += "<h2>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</h2>";
      html += "<p>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ <strong>" + device_id + "</strong> –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è</p>";
      html += "<p>–∏ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏: <strong>" + ssid + "</strong></p>";
      html += "<p>–ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</p>";
      html += "<p><em>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...</em></p>";
      html += "</div></body></html>";
      
      client.println("HTTP/1.1 200 OK");
      client.println("Content-Type: text/html; charset=utf-8");
      client.println("Connection: close");
      client.println();
      client.println(html);
      
      client.stop();
      delay(1000);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º—Å—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      Serial.println("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...");
      ESP.restart();
      return;
    }
  }
  
  client.stop();
}

// –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URL
String urlDecode(String input) {
  String output = "";
  char c;
  for (int i = 0; i < input.length(); i++) {
    c = input.charAt(i);
    if (c == '+') {
      output += ' ';
    } else if (c == '%') {
      c = input.charAt(++i);
      int high = c - (c <= '9' ? '0' : (c <= 'F' ? 'A' : 'a') - 10);
      c = input.charAt(++i);
      int low = c - (c <= '9' ? '0' : (c <= 'F' ? 'A' : 'a') - 10);
      output += (char)(high * 16 + low);
    } else {
      output += c;
    }
  }
  return output;
}

// ========== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö WIFI ==========
bool connectToWiFi() {
  Serial.println();
  Serial.print("üì∂ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ");
  Serial.println(wifiSettings.ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(wifiSettings.ssid, wifiSettings.password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
    digitalWrite(STATUS_LED, !digitalRead(STATUS_LED)); // –ú–∏–≥–∞–µ–º –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("");
    Serial.println("‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω");
    Serial.print("üì° IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
    digitalWrite(STATUS_LED, HIGH); // LED –≤—ã–∫–ª—é—á–µ–Ω
    return true;
  } else {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi");
    return false;
  }
}

// ========== –ü–†–û–í–ï–†–ö–ê –ö–ù–û–ü–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ==========
void checkConfigButton() {
  int buttonState = digitalRead(CONFIG_BUTTON_PIN);
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  static unsigned long lastDebug = 0;
  if (millis() - lastDebug > 1000) {
    //Serial.println("üîò –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: " + String(buttonState));
    lastDebug = millis();
  }
  
  if (buttonState == LOW) { // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
    if (!buttonActive) {
      buttonActive = true;
      buttonPressTime = millis();
      Serial.println("üîò –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ - —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
    }
    
    // –ò–Ω–¥–∏–∫–∞—Ü–∏—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
    if (millis() - buttonPressTime > 3000) {
      digitalWrite(STATUS_LED, LOW); // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≥–æ—Ä–∏—Ç –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞
    } else {
      // –ú–∏–≥–∞–µ–º –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏
      if ((millis() / 200) % 2 == 0) {
        digitalWrite(STATUS_LED, LOW);
      } else {
        digitalWrite(STATUS_LED, HIGH);
      }
    }
    
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥
    if (millis() - buttonPressTime > CONFIG_BUTTON_TIME) {
      Serial.println("üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ");
      startConfigMode();
      buttonActive = false;
    }
    
  } else {
    if (buttonActive) {
      buttonActive = false;
      digitalWrite(STATUS_LED, configMode ? LOW : HIGH); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
      Serial.println("üîò –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—É—â–µ–Ω–∞");
    }
  }
}

// ========== MQTT –§–£–ù–ö–¶–ò–ò ==========
void initCommonIPs() {
  if (!commonIPsInitialized) {
    IPAddress localIP = WiFi.localIP();
    commonIPs[6] = IPAddress(localIP[0], localIP[1], localIP[2], 100);
    commonIPs[7] = IPAddress(localIP[0], localIP[1], localIP[2], 50);
    commonIPs[8] = IPAddress(localIP[0], localIP[1], localIP[2], 2);
    commonIPsInitialized = true;
  }
}

String discoverMQTTBrokerNonBlocking() {
  if (!mqttSearchInProgress) {
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    mqttSearchInProgress = true;
    currentScanIP = 1;
    commonIPIndex = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à—É —Å–µ—Ç—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    IPAddress localIP = WiFi.localIP();
    IPAddress subnet = WiFi.subnetMask();
    network = IPAddress(localIP[0] & subnet[0], 
                       localIP[1] & subnet[1],
                       localIP[2] & subnet[2], 
                       0);
    
    initCommonIPs();
    
    Serial.println("üîç –ù–∞—á–∞—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫ MQTT –±—Ä–æ–∫–µ—Ä–∞...");
    lastMQTTSearch = millis();
    return "";
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
  if (millis() - lastMQTTSearch < 100) return "";
  lastMQTTSearch = millis();
  
  WiFiClient testClient;
  testClient.setTimeout(500); // –¢–∞–π–º–∞—É—Ç 500 –º—Å
  
  // –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å
  if (currentScanIP <= 20) {
    IPAddress testIP = IPAddress(network[0], network[1], network[2], currentScanIP);
    
    Serial.print("–ü—Ä–æ–≤–µ—Ä–∫–∞ ");
    Serial.print(testIP);
    Serial.println("...");
    
    if (testClient.connect(testIP, 1883)) {
      Serial.println(" ‚úÖ MQTT –Ω–∞–π–¥–µ–Ω!");
      testClient.stop();
      mqttSearchInProgress = false;
      return testIP.toString();
    }
    testClient.stop();
    currentScanIP++;
    return "";
  }
  
  // –ó–∞—Ç–µ–º common IPs
  if (commonIPIndex < 9) {
    IPAddress testIP = commonIPs[commonIPIndex];
    
    Serial.print("–ü—Ä–æ–≤–µ—Ä–∫–∞ ");
    Serial.print(testIP);
    Serial.println("...");
    
    if (testClient.connect(testIP, 1883)) {
      Serial.println(" ‚úÖ MQTT –Ω–∞–π–¥–µ–Ω!");
      testClient.stop();
      mqttSearchInProgress = false;
      return testIP.toString();
    }
    testClient.stop();
    commonIPIndex++;
    return "";
  }
  
  // –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  Serial.println("‚ùå MQTT –±—Ä–æ–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏");
  mqttSearchInProgress = false;
  return "";
}

void sendStatus() {
  /*DynamicJsonDocument doc(1024);
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  doc["device_id"] = device_id;
  doc["type"] = device_type;  // –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó!
  doc["ip"] = WiFi.localIP().toString();
  doc["mac"] = WiFi.macAddress();
  doc["rssi"] = WiFi.RSSI();
  doc["free_heap"] = ESP.getFreeHeap();
  doc["uptime"] = millis();
  doc["led_state"] = !digitalRead(STATUS_LED);
  doc["version"] = "2.0";
  doc["firmware"] = "AutoID_WiFiManager";
  doc["mqtt_broker"] = mqtt_server;
  doc["config_mode"] = configMode;
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è RGB —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  doc["action_button_pressed"] = actionButtonPressed;
  doc["led_on"] = isLedOn;
  doc["rgb_color"] = String(currentRed) + "," + String(currentGreen) + "," + String(currentBlue);
  doc["available"] = !actionButtonPressed; // –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
  
  String jsonString;
  serializeJson(doc, jsonString);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å
  Serial.print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ç–æ–ø–∏–∫: ");
  Serial.println(status_topic);
  Serial.print("üì§ –î–∞–Ω–Ω—ã–µ: ");
  Serial.println(jsonString);
  
  client.publish(status_topic.c_str(), jsonString.c_str());
  Serial.println("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
  */
   // –ü–†–û–í–ï–†–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô
  if (!client.connected()) {
    Serial.println("‚ùå MQTT –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å—Ç–∞—Ç—É—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
    return;
  }
  
  DynamicJsonDocument doc(512);
  
  // –£–ü–†–û–©–ê–ï–ú –°–¢–ê–¢–£–° –î–õ–Ø –¢–ï–°–¢–ê
  doc["id"] = device_id;
  doc["t"] = device_type;
  doc["ip"] = WiFi.localIP().toString();
  doc["rssi"] = WiFi.RSSI();
  doc["up"] = millis();
  
  // –í–†–ï–ú–ï–ù–ù–û –£–ë–ò–†–ê–ï–ú –û–°–¢–ê–õ–¨–ù–´–ï –ü–û–õ–Ø
  
  String jsonString;
  serializeJson(doc, jsonString);

  Serial.print("üì§ –¢–ï–°–¢–û–í–´–ô –°–¢–ê–¢–£–° (");
  Serial.print(jsonString.length());
  Serial.print(" chars): ");
  Serial.println(jsonString);
  
  // –ü–†–û–í–ï–†–Ø–ï–ú –ü–£–ë–õ–ò–ö–ê–¶–ò–Æ –° –¢–ê–ô–ú–ê–£–¢–û–ú
  bool success = client.publish(status_topic.c_str(), jsonString.c_str());
  
  Serial.print("üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ");
  Serial.println(success ? "‚úÖ –£–°–ü–ï–•" : "‚ùå –û–®–ò–ë–ö–ê");
  
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û MQTT
  Serial.print("üì° MQTT —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ");
  Serial.println(client.state());
  
  if (!success) {
    Serial.print("‚ùå MQTT –æ—à–∏–±–∫–∞: ");
    switch (client.state()) {
      case -4: Serial.println("MQTT_CONNECTION_TIMEOUT"); break;
      case -3: Serial.println("MQTT_CONNECTION_LOST"); break;
      case -2: Serial.println("MQTT_CONNECT_FAILED"); break;
      case -1: Serial.println("MQTT_DISCONNECTED"); break;
      case 1: Serial.println("MQTT_CONNECT_BAD_PROTOCOL"); break;
      case 2: Serial.println("MQTT_CONNECT_BAD_CLIENT_ID"); break;
      case 3: Serial.println("MQTT_CONNECT_UNAVAILABLE"); break;
      case 4: Serial.println("MQTT_CONNECT_BAD_CREDENTIALS"); break;
      case 5: Serial.println("MQTT_CONNECT_UNAUTHORIZED"); break;
      default: Serial.println(client.state()); break;
    }
  }
}

void sendButtonStatus() {
  DynamicJsonDocument doc(512);
  
  doc["device_id"] = device_id;
  doc["action_button_pressed"] = actionButtonPressed;
  doc["led_on"] = isLedOn;
  doc["timestamp"] = millis();
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  String button_topic = "devices/" + device_id + "/button";
  client.publish(button_topic.c_str(), jsonString.c_str());
  Serial.println("üîò –°—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + jsonString);
}

void sendMixColorsCommand() {
  DynamicJsonDocument doc(256);
  
  doc["command"] = "MIX_COLORS";
  doc["source_device"] = device_id;
  doc["timestamp"] = millis();
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  String mixer_topic = "devices/mixer/command";
  client.publish(mixer_topic.c_str(), jsonString.c_str());
  Serial.println("üé® –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
}

void sendData() {
  DynamicJsonDocument doc(512);
  
  // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
  int sensorValue = analogRead(A0);
  float voltage = sensorValue * (3.3 / 1024.0);
  
  doc["sensor_value"] = sensorValue;
  doc["voltage"] = voltage;
  doc["temperature"] = random(200, 300) / 10.0;
  doc["humidity"] = random(400, 800) / 10.0;
  doc["timestamp"] = millis();
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  client.publish(data_topic.c_str(), jsonString.c_str());
  Serial.println("üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: " + jsonString);
}

void sendError(String error_msg) {
  DynamicJsonDocument doc(256);
  
  doc["device_id"] = device_id;
  doc["error"] = error_msg;
  doc["timestamp"] = millis();
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  client.publish(error_topic.c_str(), jsonString.c_str());
  Serial.println("‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞: " + jsonString);
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ [");
  Serial.print(topic);
  Serial.print("]: ");
  
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  String topicStr = String(topic);
  if (!topicStr.startsWith("devices/" + device_id + "/")) {
    Serial.println("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
    return;
  }

  // –ü–∞—Ä—Å–∏–º JSON
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, message);
  
  if (error) {
    Serial.print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ");
    Serial.println(error.c_str());
    sendError("JSON parse error: " + String(error.c_str()));
    return;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  String command = doc["command"] | "";
  Serial.println("‚ö° –ö–æ–º–∞–Ω–¥–∞: " + command);

  if (command == "STATUS") {
    sendStatus();
  }
  else if (command == "RESTART") {
    sendStatus();
    delay(1000);
    ESP.restart();
  }
  else if (command == "RESET") {
    sendStatus();
  }
  else if (command == "GET_CONFIG") {
    sendStatus();
  }
  else if (command == "LED_ON") {
    digitalWrite(STATUS_LED, LOW);
    sendStatus();
  }
  else if (command == "LED_OFF") {
    digitalWrite(STATUS_LED, HIGH);
    sendStatus();
  }
  else if (command == "LED_TOGGLE") {
    digitalWrite(STATUS_LED, !digitalRead(STATUS_LED));
    sendStatus();
  }
  else if (command == "DISCOVER") {
    sendStatus();
  }
  else if (command == "CONFIG_MODE") {
    Serial.println("‚ö° –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞");
    startConfigMode();
  }
  else if (command != "") {
    Serial.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command);
    sendError("Unknown command: " + command);
  }
  else if (command == "SET_COLOR") {
    // –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    int red = doc["red"] | 0;
    int green = doc["green"] | 0;
    int blue = doc["blue"] | 0;
    
    Serial.print("üé® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ SET_COLOR: ");
    Serial.print("R="); Serial.print(red);
    Serial.print(" G="); Serial.print(green);
    Serial.print(" B="); Serial.println(blue);
    
    setRGBColor(red, green, blue);
    isLedOn = (red > 0 || green > 0 || blue > 0);
    sendStatus(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
}
  else if (command == "RESET_BUTTON") {
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    actionButtonPressed = false;
    sendStatus();
  }
  else if (command == "MIX_COLORS") {
    // –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ (–¥–ª—è mixer —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
    if (device_type == "color_mixer") {
      // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      // –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      sendStatus();
    }
  }
}

void reconnect() {
  static unsigned long lastReconnectAttempt = 0;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  checkConfigButton();
  if (configMode) return; // –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–≥–∞ - –≤—ã—Ö–æ–¥–∏–º
  
  if (millis() - lastReconnectAttempt > 5000) {
    lastReconnectAttempt = millis();
    
    Serial.print("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT...");
    
    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MQTT –±—Ä–æ–∫–µ—Ä–∞
    if (mqtt_server == "") {
      String discovered_ip = discoverMQTTBrokerNonBlocking();
      if (discovered_ip != "") {
        mqtt_server = discovered_ip;
        client.setServer(mqtt_server.c_str(), mqtt_port);
        Serial.println("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω MQTT –±—Ä–æ–∫–µ—Ä: " + mqtt_server);
      } else {
        Serial.println("‚è≥ –ü–æ–∏—Å–∫ MQTT –±—Ä–æ–∫–µ—Ä–∞...");
        return; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
      }
    }
    
    if (client.connect(device_id.c_str())) {
      Serial.println("‚úÖ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω");
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
      client.subscribe(command_topic.c_str());
      Serial.println("üì° –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞: " + command_topic);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      sendStatus();
      
    } else {
      Serial.print("‚ùå –û—à–∏–±–∫–∞ MQTT, rc=");
      Serial.print(client.state());
      Serial.println(" –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º MQTT —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      mqtt_server = "";
    }
  }
}

void setRGBColor(int red, int green, int blue) {
  analogWrite(RGB_RED_PIN, red);
  analogWrite(RGB_GREEN_PIN, green); 
  analogWrite(RGB_BLUE_PIN, blue);
  currentRed = red;
  currentGreen = green;
  currentBlue = blue;
}

void checkActionButton() {
  static unsigned long lastButtonPress = 0;
  int buttonState = digitalRead(ACTION_BUTTON_PIN);
  
  if (buttonState == LOW && millis() - lastButtonPress > 500) {
    lastButtonPress = millis();
    handleActionButtonPress();
  }
}

void handleActionButtonPress() {
  if (device_type == "rgb_controller") {
    // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏
    actionButtonPressed = true;
    isLedOn = false;
    setRGBColor(0, 0, 0); // –í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç–æ–¥–∏–æ–¥
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    sendButtonStatus();
    
  } else if (device_type == "color_mixer") {
    // –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
    sendMixColorsCommand();
  }
}

// ========== SETUP ==========
void setup() {
  pinMode(STATUS_LED, OUTPUT);
  pinMode(CONFIG_BUTTON_PIN, INPUT_PULLUP);
  digitalWrite(STATUS_LED, HIGH); // LED –≤—ã–∫–ª—é—á–µ–Ω

   // –ü–∏–Ω—ã RGB
  pinMode(ACTION_BUTTON_PIN, INPUT_PULLUP);
  pinMode(RGB_RED_PIN, OUTPUT);
  pinMode(RGB_GREEN_PIN, OUTPUT);
  pinMode(RGB_BLUE_PIN, OUTPUT);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RGB
  setRGBColor(1, 1, 1);
  
  Serial.begin(115200);
  Serial.println();
  Serial.println("üöÄ ESP8266 MQTT Client —Å WiFi –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º");
  Serial.println("========================================");
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  device_id = generateDeviceID();
  createTopics();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ EEPROM
  loadWiFiSettings();
  
  // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi
  if (isConfigured && !configMode) {
    if (connectToWiFi()) {
      // –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ WiFi - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç
      client.setServer(mqtt_server.c_str(), mqtt_port);
      client.setCallback(callback);
      client.setKeepAlive(60);
      
      Serial.println("üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:");
      Serial.println("   ID: " + device_id);
      Serial.println("   –¢–∏–ø: " + device_type);
      Serial.println("   MQTT —Å–µ—Ä–≤–µ—Ä: " + mqtt_server);
      Serial.println("   –¢–æ–ø–∏–∫–∏:");
      Serial.println("     üì° " + status_topic);
      Serial.println("     üìä " + data_topic);
      Serial.println("     ‚ö° " + command_topic);
      
      Serial.println("‚úÖ ESP8266 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ");
    } else {
      // –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi, –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
      startConfigMode();
    }
  } else {
    // –ù–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    startConfigMode();
  }
}

// ========== MAIN LOOP ==========
void loop() {
  if (configMode) {
    // –†–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    checkConfigButton();
    handleConfigWebServer();
    
    // –ú–∏–≥–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (1 —Å–µ–∫—É–Ω–¥–∞ –≤–∫–ª, 1 —Å–µ–∫—É–Ω–¥–∞ –≤—ã–∫–ª)
    static unsigned long lastBlink = 0;
    if (millis() - lastBlink > 1000) {
      digitalWrite(STATUS_LED, !digitalRead(STATUS_LED));
      lastBlink = millis();
    }
  } else {
    // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    checkConfigButton();
    checkActionButton(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏
    
    if (!client.connected()) {
      reconnect();
    } else {
      client.loop();
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    static unsigned long lastMsg = 0;
    if (millis() - lastMsg > 10000) {
      lastMsg = millis();
      sendData();
      sendStatus();
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    /*
    static unsigned long lastStatusUpdate = 0;
    if (millis() - lastStatusUpdate > 30000) {
      lastStatusUpdate = millis();
      sendStatus();
    }
    */
    
    // –ú–∏–≥–∞–Ω–∏–µ LED –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–∏–æ–¥)
    static unsigned long lastBlink = 0;
    if (client.connected() && millis() - lastBlink > 2000) {
      lastBlink = millis();
      digitalWrite(STATUS_LED, !digitalRead(STATUS_LED));
    }
  }
  
  delay(50);
}