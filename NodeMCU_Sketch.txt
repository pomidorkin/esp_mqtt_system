#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
const char* ssid = "Galaxy A51B860";
const char* password = "gfifgfif";

// –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï MQTT –ë–†–û–ö–ï–†–ê!
String mqtt_server = "";  // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
const int mqtt_port = 1883;

// ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô ID ==========
String device_id;
String device_type = "sensor";

// MQTT —Ç–æ–ø–∏–∫–∏ (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
String status_topic;
String data_topic;
String command_topic;
String disconnect_topic;
String error_topic;

// ========== –û–ë–™–ï–ö–¢–´ ==========
WiFiClient espClient;
PubSubClient client(espClient);

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
unsigned long lastMsg = 0;
unsigned long lastStatusUpdate = 0;
bool ledState = false;
int sensorValue = 0;

// ========== –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø MQTT –ë–†–û–ö–ï–†–ê ==========
String discoverMQTTBroker() {
  Serial.println("üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫ MQTT –±—Ä–æ–∫–µ—Ä–∞ –≤ —Å–µ—Ç–∏...");
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à—É —Å–µ—Ç—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  IPAddress localIP = WiFi.localIP();
  IPAddress subnet = WiFi.subnetMask();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  IPAddress network = IPAddress(localIP[0] & subnet[0], 
                               localIP[1] & subnet[1],
                               localIP[2] & subnet[2], 
                               0);
  
  WiFiClient testClient;
  testClient.setTimeout(1000); // –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
  
  // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 –∞–¥—Ä–µ—Å–æ–≤
  for (int i = 1; i <= 20; i++) {
    IPAddress testIP = IPAddress(network[0], network[1], network[2], i);
    
    Serial.print("–ü—Ä–æ–≤–µ—Ä–∫–∞ ");
    Serial.print(testIP);
    Serial.print("...");
    
    if (testClient.connect(testIP, 1883)) {
      Serial.println(" ‚úÖ MQTT –Ω–∞–π–¥–µ–Ω!");
      testClient.stop();
      return testIP.toString();
    }
    testClient.stop();
    delay(10);
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –ø—Ä–æ–±—É–µ–º common IPs
  Serial.println("‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É—é common IPs...");
  
  IPAddress commonIPs[] = {
    IPAddress(192,168,1,100),
    IPAddress(192,168,0,100),
    IPAddress(192,168,1,1),
    IPAddress(192,168,0,1),
    IPAddress(localIP[0], localIP[1], localIP[2], 100),
    IPAddress(localIP[0], localIP[1], localIP[2], 50),
    IPAddress(localIP[0], localIP[1], localIP[2], 2),
    IPAddress(10,0,0,100),
    IPAddress(172,16,0,100)
  };
  
  int commonCount = sizeof(commonIPs) / sizeof(commonIPs[0]);
  for (int i = 0; i < commonCount; i++) {
    IPAddress testIP = commonIPs[i];
    
    Serial.print("–ü—Ä–æ–≤–µ—Ä–∫–∞ ");
    Serial.print(testIP);
    Serial.print("...");
    
    if (testClient.connect(testIP, 1883)) {
      Serial.println(" ‚úÖ MQTT –Ω–∞–π–¥–µ–Ω!");
      testClient.stop();
      return testIP.toString();
    }
    testClient.stop();
    delay(10);
  }
  
  Serial.println("‚ùå MQTT –±—Ä–æ–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏");
  return "";
}

// ========== –ì–ï–ù–ï–†–ê–¶–ò–Ø ID ==========
String generateDeviceID() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º MAC –∞–¥—Ä–µ—Å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
  String mac = WiFi.macAddress();
  mac.replace(":", "");
  String id = "ESP_" + mac.substring(6); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
  return id;
}

// ========== –°–û–ó–î–ê–ù–ò–ï –¢–û–ü–ò–ö–û–í ==========
void createTopics() {
  status_topic = "devices/" + device_id + "/status";
  data_topic = "devices/" + device_id + "/data";
  command_topic = "devices/" + device_id + "/command";
  disconnect_topic = "devices/" + device_id + "/disconnect";
  error_topic = "devices/" + device_id + "/error";
}

// ========== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –£–°–¢–†–û–ô–°–¢–í–ê ==========
void detectDeviceType() {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –¥–∞—Ç—á–∏–∫–∞–º
  // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä)
  if (/* —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ä–µ–ª–µ */ false) {
    device_type = "switch";
  } else if (/* —É—Å–ª–æ–≤–∏–µ –¥–ª—è RGB */ false) {
    device_type = "rgb";
  } else if (/* —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–µ–Ω—Å–æ—Ä–∞ */ true) {
    device_type = "sensor"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–Ω—Å–æ—Ä
  }
}

// ========== –ù–ê–°–¢–†–û–ô–ö–ê WIFI ==========
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
    digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("");
    Serial.println("‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω");
    Serial.print("üì° IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
    Serial.print("üîë MAC –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.macAddress());
    digitalWrite(LED_BUILTIN, LOW);
  } else {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi");
  }
}

// ========== MQTT CALLBACK ==========
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ [");
  Serial.print(topic);
  Serial.print("]: ");
  
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  String topicStr = String(topic);
  if (!topicStr.startsWith("devices/" + device_id + "/")) {
    Serial.println("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
    return;
  }

  // –ü–∞—Ä—Å–∏–º JSON
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, message);
  
  if (error) {
    Serial.print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ");
    Serial.println(error.c_str());
    sendError("JSON parse error: " + String(error.c_str()));
    return;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  String command = doc["command"] | "";
  Serial.println("‚ö° –ö–æ–º–∞–Ω–¥–∞: " + command);

  if (command == "STATUS") {
    sendStatus();
  }
  else if (command == "RESTART") {
    sendStatus();
    delay(1000);
    ESP.restart();
  }
  else if (command == "RESET") {
    sendStatus();
  }
  else if (command == "GET_CONFIG") {
    sendConfig();
  }
  else if (command == "LED_ON") {
    digitalWrite(LED_BUILTIN, LOW);
    ledState = true;
    sendStatus();
  }
  else if (command == "LED_OFF") {
    digitalWrite(LED_BUILTIN, HIGH);
    ledState = false;
    sendStatus();
  }
  else if (command == "LED_TOGGLE") {
    ledState = !ledState;
    digitalWrite(LED_BUILTIN, !ledState);
    sendStatus();
  }
  else if (command == "DISCOVER") {
    // –û—Ç–≤–µ—Ç –Ω–∞ broadcast discovery
    sendStatus();
  }
  else if (command != "") {
    Serial.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command);
    sendError("Unknown command: " + command);
  }
}

// ========== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï MQTT ==========
void reconnect() {
  while (!client.connected()) {
    Serial.print("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT...");
    
    // –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú MQTT –ë–†–û–ö–ï–† –ü–†–ò –ö–ê–ñ–î–û–ú –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò
    if (mqtt_server == "") {
      String discovered_ip = discoverMQTTBroker();
      if (discovered_ip != "") {
        mqtt_server = discovered_ip;
        client.setServer(mqtt_server.c_str(), mqtt_port);
        Serial.println("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω MQTT –±—Ä–æ–∫–µ—Ä: " + mqtt_server);
      } else {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ MQTT –±—Ä–æ–∫–µ—Ä");
        delay(5000);
        continue;
      }
    }
    
    if (client.connect(device_id.c_str())) {
      Serial.println("‚úÖ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω");
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
      client.subscribe(command_topic.c_str());
      Serial.println("üì° –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞: " + command_topic);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      sendStatus();
      
    } else {
      Serial.print("‚ùå –û—à–∏–±–∫–∞ MQTT, rc=");
      Serial.print(client.state());
      Serial.println(" –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º MQTT —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      mqtt_server = "";
      delay(5000);
    }
  }
}

// ========== –û–¢–ü–†–ê–í–ö–ê –°–¢–ê–¢–£–°–ê ==========
void sendStatus() {
  DynamicJsonDocument doc(1024);
  
  doc["device_id"] = device_id;
  doc["type"] = device_type;
  doc["ip"] = WiFi.localIP().toString();
  doc["mac"] = WiFi.macAddress();
  doc["rssi"] = WiFi.RSSI();
  doc["free_heap"] = ESP.getFreeHeap();
  doc["uptime"] = millis();
  doc["led_state"] = ledState;
  doc["version"] = "2.0";
  doc["firmware"] = "AutoID_System";
  doc["mqtt_broker"] = mqtt_server; // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–∫–µ—Ä–µ
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  client.publish(status_topic.c_str(), jsonString.c_str());
  Serial.println("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: " + jsonString);
}

// ========== –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• ==========
void sendData() {
  DynamicJsonDocument doc(512);
  
  // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
  sensorValue = analogRead(A0);
  float voltage = sensorValue * (3.3 / 1024.0);
  
  doc["sensor_value"] = sensorValue;
  doc["voltage"] = voltage;
  doc["temperature"] = random(200, 300) / 10.0;
  doc["humidity"] = random(400, 800) / 10.0;
  doc["timestamp"] = millis();
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  client.publish(data_topic.c_str(), jsonString.c_str());
  Serial.println("üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: " + jsonString);
}

// ========== –û–¢–ü–†–ê–í–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ==========
void sendConfig() {
  DynamicJsonDocument doc(512);
  
  doc["device_id"] = device_id;
  doc["type"] = device_type;
  doc["firmware"] = "ESP8266_AutoID_v2.0";
  doc["mqtt_server"] = mqtt_server;
  doc["mqtt_port"] = mqtt_port;
  doc["wifi_ssid"] = ssid;
  doc["mac_address"] = WiFi.macAddress();
  doc["auto_generated"] = true;
  doc["auto_discovery"] = true; // –§–ª–∞–≥ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  client.publish(data_topic.c_str(), jsonString.c_str());
  Serial.println("‚öôÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: " + jsonString);
}

// ========== –û–¢–ü–†–ê–í–ö–ê –û–®–ò–ë–ö–ò ==========
void sendError(String error_msg) {
  DynamicJsonDocument doc(256);
  
  doc["device_id"] = device_id;
  doc["error"] = error_msg;
  doc["timestamp"] = millis();
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  client.publish(error_topic.c_str(), jsonString.c_str());
  Serial.println("‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞: " + jsonString);
}

// ========== SETUP ==========
void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);
  
  Serial.begin(115200);
  Serial.println();
  Serial.println("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP8266 —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º MQTT...");
  
  setup_wifi();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫–∏
  device_id = generateDeviceID();
  detectDeviceType();
  createTopics();
  
  // –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï MQTT –ë–†–û–ö–ï–†–ê
  String discovered_ip = discoverMQTTBroker();
  if (discovered_ip != "") {
    mqtt_server = discovered_ip;
    Serial.println("‚úÖ MQTT –±—Ä–æ–∫–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: " + mqtt_server);
  } else {
    Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å MQTT –±—Ä–æ–∫–µ—Ä");
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏
  }
  
  Serial.println("üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:");
  Serial.println("   ID: " + device_id);
  Serial.println("   –¢–∏–ø: " + device_type);
  Serial.println("   MQTT —Å–µ—Ä–≤–µ—Ä: " + mqtt_server);
  Serial.println("   –¢–æ–ø–∏–∫–∏:");
  Serial.println("     üì° " + status_topic);
  Serial.println("     üìä " + data_topic);
  Serial.println("     ‚ö° " + command_topic);
  
  client.setServer(mqtt_server.c_str(), mqtt_port);
  client.setCallback(callback);
  
  delay(2000);
  Serial.println("‚úÖ ESP8266 MQTT Client –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
  Serial.println("=====================================");
}

// ========== MAIN LOOP ==========
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  if (now - lastMsg > 10000) {
    lastMsg = now;
    sendData();
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  if (now - lastStatusUpdate > 30000) {
    lastStatusUpdate = now;
    sendStatus();
  }
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
  static unsigned long lastBlink = 0;
  if (now - lastBlink > 1000) {
    lastBlink = now;
    digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
  }
  
  delay(100);
}