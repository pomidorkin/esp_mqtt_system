# web_server.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from flask import Flask, render_template, jsonify, request, send_from_directory
import paho.mqtt.client as mqtt
import json
import time
import threading
import os
from datetime import datetime
from collections import defaultdict
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    MQTT_BROKER_HOST = "localhost"
    MQTT_BROKER_PORT = 1883
    MQTT_KEEPALIVE = 60
    WEB_HOST = "0.0.0.0"
    WEB_PORT = 5000
    DEVICE_TOPIC_PREFIX = "devices"
    STATUS_UPDATE_INTERVAL = 30  # —Å–µ–∫—É–Ω–¥—ã

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
class DeviceStorage:
    def __init__(self):
        self.devices = {}
        self.device_types = defaultdict(list)
        self.message_count = 0
        self.error_count = 0
        self.start_time = time.time()
        self.event_log = []
        
    def add_device(self, device_id, device_type, ip_address, attributes=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        device_data = {
            'id': device_id,
            'type': device_type,
            'ip': ip_address,
            'status': 'connected',
            'last_seen': time.time(),
            'attributes': attributes or {},
            'created_at': datetime.now().isoformat()
        }
        
        self.devices[device_id] = device_data
        
        if device_id not in self.device_types[device_type]:
            self.device_types[device_type].append(device_id)
            
        self.log_event(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {device_id} ({device_type})")
        logger.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {device_id}")
        
        return device_data
    
    def update_device(self, device_id, updates):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if device_id in self.devices:
            self.devices[device_id].update(updates)
            self.devices[device_id]['last_seen'] = time.time()
            
    def remove_device(self, device_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if device_id in self.devices:
            device_type = self.devices[device_id]['type']
            if device_id in self.device_types[device_type]:
                self.device_types[device_type].remove(device_id)
                
            self.log_event(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {device_id}")
            del self.devices[device_id]
            logger.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ: {device_id}")
    
    def get_online_devices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        current_time = time.time()
        online_devices = []
        
        for device_id, device in self.devices.items():
            if current_time - device['last_seen'] < Config.STATUS_UPDATE_INTERVAL:
                online_devices.append(device)
            else:
                device['status'] = 'disconnected'
                
        return online_devices
    
    def get_device_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"""
        online_devices = self.get_online_devices()
        
        stats = {
            'total': len(self.devices),
            'online': len(online_devices),
            'by_type': {}
        }
        
        for device_type, devices in self.device_types.items():
            online_count = sum(1 for device_id in devices 
                             if self.devices[device_id]['status'] == 'connected')
            stats['by_type'][device_type] = online_count
            
        return stats
    
    def log_event(self, message, level='info'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        event = {
            'timestamp': datetime.now().isoformat(),
            'message': message,
            'level': level
        }
        
        self.event_log.append(event)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        if len(self.event_log) > 1000:
            self.event_log = self.event_log[-500:]
    
    def get_system_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
        uptime = time.time() - self.start_time
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        seconds = int(uptime % 60)
        
        return {
            'uptime': f"{hours:02d}:{minutes:02d}:{seconds:02d}",
            'message_count': self.message_count,
            'error_count': self.error_count,
            'device_count': len(self.devices),
            'online_count': len(self.get_online_devices())
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = DeviceStorage()
mqtt_client = None

# MQTT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def on_mqtt_connect(client, userdata, flags, rc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT"""
    if rc == 0:
        logger.info("‚úÖ MQTT –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±—Ä–æ–∫–µ—Ä—É")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        topics = [
            f"{Config.DEVICE_TOPIC_PREFIX}/+/status",
            f"{Config.DEVICE_TOPIC_PREFIX}/+/disconnect", 
            f"{Config.DEVICE_TOPIC_PREFIX}/+/data",
            f"{Config.DEVICE_TOPIC_PREFIX}/+/error"
        ]
        
        for topic in topics:
            client.subscribe(topic)
            logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: {topic}")
            
        storage.log_event("MQTT –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±—Ä–æ–∫–µ—Ä—É")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT: {rc}")
        storage.error_count += 1

def on_mqtt_message(client, userdata, msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö MQTT —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        storage.message_count += 1
        
        topic_parts = msg.topic.split('/')
        if len(topic_parts) < 3:
            return
            
        device_id = topic_parts[1]
        message_type = topic_parts[2]
        payload = msg.payload.decode('utf-8')
        
        logger.info(f"üì® MQTT: [{msg.topic}] {payload}")
        
        if message_type == "status":
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            data = json.loads(payload)
            storage.add_device(
                device_id=device_id,
                device_type=data.get('type', 'unknown'),
                ip_address=data.get('ip', 'unknown'),
                attributes=data
            )
            
        elif message_type == "data":
            # –î–∞–Ω–Ω—ã–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            data = json.loads(payload)
            storage.update_device(device_id, {
                'last_data': data,
                'last_data_time': time.time()
            })
            
        elif message_type == "disconnect":
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            storage.remove_device(device_id)
            
        elif message_type == "error":
            # –û—à–∏–±–∫–∞ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            data = json.loads(payload)
            storage.error_count += 1
            storage.log_event(f"–û—à–∏–±–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}: {data.get('error', 'Unknown')}", 'error')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        storage.error_count += 1
        storage.log_event(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT: {str(e)}", 'error')

def setup_mqtt():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT –∫–ª–∏–µ–Ω—Ç–∞"""
    global mqtt_client
    
    mqtt_client = mqtt.Client()
    mqtt_client.on_connect = on_mqtt_connect
    mqtt_client.on_message = on_mqtt_message
    
    try:
        mqtt_client.connect(Config.MQTT_BROKER_HOST, Config.MQTT_BROKER_PORT, Config.MQTT_KEEPALIVE)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º MQTT loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def mqtt_loop():
            try:
                mqtt_client.loop_forever()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ MQTT loop: {e}")
                storage.error_count += 1
        
        mqtt_thread = threading.Thread(target=mqtt_loop, daemon=True)
        mqtt_thread.start()
        
        logger.info("‚úÖ MQTT –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT: {e}")
        storage.error_count += 1
        return False

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/status')
def status_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return render_template('status.html')

@app.route('/commands')
def commands_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥"""
    return render_template('commands.html')

@app.route('/devices')
def devices_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
    return render_template('devices.html')

# API endpoints
@app.route('/api/devices')
def api_get_devices():
    """API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        online_devices = storage.get_online_devices()
        
        return jsonify({
            'status': 'success',
            'devices': online_devices,
            'stats': storage.get_device_stats(),
            'timestamp': time.time()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/device/<device_id>/command', methods=['POST'])
def api_send_command(device_id):
    """API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'status': 'error', 'message': 'No JSON data provided'}), 400
            
        command = data.get('command')
        if not command:
            return jsonify({'status': 'error', 'message': 'Command not specified'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if device_id not in storage.devices:
            return jsonify({'status': 'error', 'message': f'Device {device_id} not found'}), 404
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ MQTT
        topic = f"{Config.DEVICE_TOPIC_PREFIX}/{device_id}/command"
        mqtt_client.publish(topic, json.dumps({
            'command': command,
            'timestamp': time.time(),
            'source': 'web'
        }))
        
        storage.log_event(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {device_id} -> {command}")
        logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {device_id} -> {command}")
        
        return jsonify({
            'status': 'success',
            'message': f'Command sent to {device_id}',
            'device_id': device_id,
            'command': command
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        storage.error_count += 1
        return jsonify({
            'status': 'error', 
            'message': str(e)
        }), 500

@app.route('/api/broadcast', methods=['POST'])
def api_broadcast_command():
    """API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'status': 'error', 'message': 'No JSON data provided'}), 400
            
        command = data.get('command')
        if not command:
            return jsonify({'status': 'error', 'message': 'Command not specified'}), 400
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        online_devices = storage.get_online_devices()
        sent_count = 0
        
        for device in online_devices:
            topic = f"{Config.DEVICE_TOPIC_PREFIX}/{device['id']}/command"
            mqtt_client.publish(topic, json.dumps({
                'command': command,
                'timestamp': time.time(),
                'source': 'broadcast'
            }))
            sent_count += 1
        
        storage.log_event(f"Broadcast –∫–æ–º–∞–Ω–¥–∞: {command} -> {sent_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        logger.info(f"üì¢ Broadcast –∫–æ–º–∞–Ω–¥–∞: {command} -> {sent_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        return jsonify({
            'status': 'success',
            'message': f'Command broadcast to {sent_count} devices',
            'sent_count': sent_count,
            'command': command
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ broadcast –∫–æ–º–∞–Ω–¥—ã: {e}")
        storage.error_count += 1
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/system/status')
def api_system_status():
    """API: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        system_info = storage.get_system_info()
        device_stats = storage.get_device_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        mqtt_connected = mqtt_client and mqtt_client.is_connected()
        
        return jsonify({
            'status': 'success',
            'system': {
                'mqtt_connected': mqtt_connected,
                'web_server': True,
                'uptime': system_info['uptime'],
                'message_count': system_info['message_count'],
                'error_count': system_info['error_count']
            },
            'devices': device_stats,
            'timestamp': time.time()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/system/events')
def api_system_events():
    """API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        limit = request.args.get('limit', 50, type=int)
        events = storage.event_log[-limit:] if storage.event_log else []
        
        return jsonify({
            'status': 'success',
            'events': events,
            'total_count': len(storage.event_log)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/device/<device_id>/info')
def api_device_info(device_id):
    """API: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    try:
        if device_id not in storage.devices:
            return jsonify({'status': 'error', 'message': 'Device not found'}), 404
        
        device = storage.devices[device_id]
        return jsonify({
            'status': 'success',
            'device': device
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/discover', methods=['POST'])
def api_discover_devices():
    """API: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        discovery_topic = f"{Config.DEVICE_TOPIC_PREFIX}/discovery"
        mqtt_client.publish(discovery_topic, json.dumps({
            'command': 'DISCOVER',
            'timestamp': time.time()
        }))
        
        storage.log_event("–ó–∞–ø—É—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        logger.info("üîç –ó–∞–ø—É—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        return jsonify({
            'status': 'success',
            'message': 'Device discovery initiated'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/system/shutdown', methods=['POST'])
def api_system_shutdown():
    """API: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    try:
        storage.log_event("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã", 'warning')
        logger.warning("üõë –ó–∞–ø—Ä–æ—à–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def delayed_shutdown():
            time.sleep(2)
            os._exit(0)
        
        shutdown_thread = threading.Thread(target=delayed_shutdown, daemon=True)
        shutdown_thread.start()
        
        return jsonify({
            'status': 'success',
            'message': 'System shutdown initiated'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route('/static/<path:filename>')
def serve_static(filename):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    return send_from_directory('static', filename)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({'status': 'error', 'message': 'Resource not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 Internal Server Error: {error}")
    return jsonify({'status': 'error', 'message': 'Internal server error'}), 500

def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç
        if not setup_mqtt():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å MQTT –∫–ª–∏–µ–Ω—Ç")
            return False
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        logger.info(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{Config.WEB_HOST}:{Config.WEB_PORT}")
        
        storage.log_event("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
        app.run(
            host=Config.WEB_HOST,
            port=Config.WEB_PORT,
            debug=False,
            threaded=True
        )
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
if __name__ == '__main__':
    start_web_server()