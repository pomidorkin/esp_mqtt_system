# web_server.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú IP
from flask import Flask, render_template, jsonify, request, send_from_directory
import paho.mqtt.client as mqtt
import json
import time
import threading
import os
from datetime import datetime
from collections import defaultdict
import logging
import socket

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–ï–¢–ï–í–´–• –ù–ê–°–¢–†–û–ï–ö
def get_local_ip():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "127.0.0.1"

LOCAL_IP = get_local_ip()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –° –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú
class Config:
    MQTT_BROKER_HOST = LOCAL_IP  # –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï!
    MQTT_BROKER_PORT = 1883
    MQTT_KEEPALIVE = 60
    WEB_HOST = "0.0.0.0"
    WEB_PORT = 5000
    DEVICE_TOPIC_PREFIX = "devices"
    STATUS_UPDATE_INTERVAL = 30  # —Å–µ–∫—É–Ω–¥—ã

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print("=" * 50)
print("üåê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
print(f"üìç –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {LOCAL_IP}")
print(f"üîó MQTT –±—Ä–æ–∫–µ—Ä: {Config.MQTT_BROKER_HOST}:{Config.MQTT_BROKER_PORT}")
print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://{LOCAL_IP}:{Config.WEB_PORT}")
print("=" * 50)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
class DeviceStorage:
    def __init__(self):
        self.devices = {}
        self.device_types = defaultdict(list)
        self.message_count = 0
        self.error_count = 0
        self.start_time = time.time()
        self.event_log = []
        
    def add_device(self, device_id, device_type, ip_address, attributes=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RGB —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        device_data = {
            'id': device_id,
            'type': device_type,
            'ip': ip_address,
            'status': 'connected',
            'last_seen': time.time(),
            'attributes': attributes or {},
            'created_at': datetime.now().isoformat(),
            # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è RGB —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            'action_button_pressed': False,
            'led_on': True,
            'rgb_color': '0,0,0',  # —Ñ–æ—Ä–º–∞—Ç: "red,green,blue"
            'available': True      # –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è
        if attributes:
            if 'action_button_pressed' in attributes:
                device_data['action_button_pressed'] = attributes['action_button_pressed']
            if 'led_on' in attributes:
                device_data['led_on'] = attributes['led_on']
            if 'rgb_color' in attributes:
                device_data['rgb_color'] = attributes['rgb_color']
            if 'available' in attributes:
                device_data['available'] = attributes['available']
        
        self.devices[device_id] = device_data
        
        if device_id not in self.device_types[device_type]:
            self.device_types[device_type].append(device_id)
            
        self.log_event(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {device_id} ({device_type})")
        logger.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {device_id}")
        
        return device_data
    
    def update_device(self, device_id, updates):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if device_id in self.devices:
            self.devices[device_id].update(updates)
            self.devices[device_id]['last_seen'] = time.time()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è RGB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
            if self.devices[device_id]['type'] == 'rgb_controller':
                action_pressed = self.devices[device_id].get('action_button_pressed', False)
                self.devices[device_id]['available'] = not action_pressed
    
    def remove_device(self, device_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if device_id in self.devices:
            device_type = self.devices[device_id]['type']
            if device_id in self.device_types[device_type]:
                self.device_types[device_type].remove(device_id)
                
            self.log_event(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {device_id}")
            del self.devices[device_id]
            logger.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ: {device_id}")
    
    def get_online_devices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        current_time = time.time()
        online_devices = []
        
        for device_id, device in self.devices.items():
            if current_time - device['last_seen'] < Config.STATUS_UPDATE_INTERVAL:
                online_devices.append(device)
            else:
                device['status'] = 'disconnected'
                
        return online_devices
    
    def get_device_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"""
        online_devices = self.get_online_devices()
        
        stats = {
            'total': len(self.devices),
            'online': len(online_devices),
            'by_type': {}
        }
        
        for device_type, devices in self.device_types.items():
            online_count = sum(1 for device_id in devices 
                             if self.devices[device_id]['status'] == 'connected')
            stats['by_type'][device_type] = online_count
            
        return stats

    # ========== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø RGB –£–°–¢–†–û–ô–°–¢–í ==========
    
    def get_available_rgb_controllers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö RGB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ (–∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞)"""
        available_devices = []
        for device_id, device in self.devices.items():
            if (device.get('type') == 'rgb_controller' and 
                device.get('status') == 'connected' and
                not device.get('action_button_pressed', False)):
                available_devices.append(device)
        return available_devices
    
    def set_device_color(self, device_id, red, green, blue):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ MQTT"""
        if device_id not in self.devices:
            logger.error(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞")
            return False
        
        try:
            topic = f"{Config.DEVICE_TOPIC_PREFIX}/{device_id}/command"
            mqtt_client.publish(topic, json.dumps({
                'command': 'SET_COLOR',
                'red': max(0, min(255, red)),
                'green': max(0, min(255, green)),
                'blue': max(0, min(255, blue)),
                'timestamp': time.time()
            }))
            
            self.log_event(f"–ö–æ–º–∞–Ω–¥–∞ SET_COLOR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {device_id} -> RGB({red},{green},{blue})")
            logger.info(f"üé® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞: {device_id} -> RGB({red},{green},{blue})")
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.devices[device_id]['rgb_color'] = f"{red},{green},{blue}"
            self.devices[device_id]['led_on'] = (red > 0 or green > 0 or blue > 0)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ –¥–ª—è {device_id}: {e}")
            self.error_count += 1
            return False
    
    def mix_colors(self):
        """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –º–µ–∂–¥—É –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ RGB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏"""
        try:
            available_devices = self.get_available_rgb_controllers()
            
            if len(available_devices) < 2:
                message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è"
                self.log_event(message, 'warning')
                return {"status": "error", "message": message}
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–≤–µ—Ç–∞
            colors = []
            device_ids = []
            
            for device in available_devices:
                rgb_str = device.get('rgb_color', '0,0,0')
                try:
                    colors.append([int(x) for x in rgb_str.split(',')])
                    device_ids.append(device['id'])
                except ValueError:
                    colors.append([0, 0, 0])  # —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ)
            mixed_colors = [colors[-1]] + colors[:-1]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
            success_count = 0
            for i, device_id in enumerate(device_ids):
                if i < len(mixed_colors):
                    new_color = mixed_colors[i]
                    if self.set_device_color(device_id, new_color[0], new_color[1], new_color[2]):
                        success_count += 1
            
            message = f"–¶–≤–µ—Ç–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã –¥–ª—è {success_count} –∏–∑ {len(available_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            self.log_event(message)
            logger.info(f"üé® {message}")
            
            return {
                "status": "success", 
                "message": message,
                "mixed_count": success_count,
                "total_available": len(available_devices)
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            self.error_count += 1
            self.log_event(error_msg, 'error')
            return {"status": "error", "message": error_msg}
    
    def reset_device_button(self, device_id):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if device_id not in self.devices:
            logger.error(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏")
            return False
        
        try:
            topic = f"{Config.DEVICE_TOPIC_PREFIX}/{device_id}/command"
            mqtt_client.publish(topic, json.dumps({
                'command': 'RESET_BUTTON',
                'timestamp': time.time()
            }))
            
            self.log_event(f"–ö–æ–º–∞–Ω–¥–∞ RESET_BUTTON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {device_id}")
            logger.info(f"üîÑ –°–±—Ä–æ—Å –∫–Ω–æ–ø–∫–∏: {device_id}")
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.devices[device_id]['action_button_pressed'] = False
            self.devices[device_id]['available'] = True
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è {device_id}: {e}")
            self.error_count += 1
            return False
    
    def get_rgb_controllers_info(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö RGB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö"""
        rgb_devices = []
        for device_id, device in self.devices.items():
            if device.get('type') == 'rgb_controller':
                rgb_info = {
                    'id': device['id'],
                    'status': device['status'],
                    'action_button_pressed': device.get('action_button_pressed', False),
                    'led_on': device.get('led_on', False),
                    'rgb_color': device.get('rgb_color', '0,0,0'),
                    'available': device.get('available', True),
                    'last_seen': device.get('last_seen'),
                    'ip': device.get('ip', 'unknown')
                }
                rgb_devices.append(rgb_info)
        
        return {
            'total': len(rgb_devices),
            'devices': rgb_devices
        }
    
    def log_event(self, message, level='info'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        event = {
            'timestamp': datetime.now().isoformat(),
            'message': message,
            'level': level
        }
        
        self.event_log.append(event)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        if len(self.event_log) > 1000:
            self.event_log = self.event_log[-500:]
    
    def get_system_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
        uptime = time.time() - self.start_time
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        seconds = int(uptime % 60)

        return {
            'uptime': f"{hours:02d}:{minutes:02d}:{seconds:02d}",
            'message_count': self.message_count,
            'error_count': self.error_count,
            'device_count': len(self.devices),
            'online_count': len(self.get_online_devices())
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = DeviceStorage()
mqtt_client = None

# MQTT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def on_mqtt_connect(client, userdata, flags, rc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT"""
    if rc == 0:
        logger.info(f"‚úÖ MQTT –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±—Ä–æ–∫–µ—Ä—É {Config.MQTT_BROKER_HOST}:{Config.MQTT_BROKER_PORT}")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        topics = [
            f"{Config.DEVICE_TOPIC_PREFIX}/+/status",      # –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            f"{Config.DEVICE_TOPIC_PREFIX}/+/disconnect",  # –û—Ç–∫–ª—é—á–µ–Ω–∏—è
            f"{Config.DEVICE_TOPIC_PREFIX}/+/data",        # –î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤
            f"{Config.DEVICE_TOPIC_PREFIX}/+/error",       # –û—à–∏–±–∫–∏
            f"{Config.DEVICE_TOPIC_PREFIX}/+/button"       # –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        ]
        
        for topic in topics:
            client.subscribe(topic)
            logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: {topic}")
            
        storage.log_event("MQTT –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±—Ä–æ–∫–µ—Ä—É")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        client.publish(f"{Config.DEVICE_TOPIC_PREFIX}/discovery", json.dumps({
            'command': 'DISCOVER',
            'timestamp': time.time(),
            'source': 'server'
        }))
        
        logger.info("üîç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ DISCOVER –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT: {rc}")
        storage.error_count += 1
        storage.log_event(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT: –∫–æ–¥ {rc}", 'error')

def on_mqtt_message(client, userdata, msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö MQTT —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        storage.message_count += 1
        
        # –í–†–ï–ú–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê - –ª–æ–≥–∏—Ä—É–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è
        payload_str = msg.payload.decode('utf-8')
        logger.info(f"üîç MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ: [{msg.topic}] {payload_str}")
        
        topic_parts = msg.topic.split('/')
        if len(topic_parts) < 3:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ø–∏–∫–∞: {msg.topic}")
            return
            
        device_id = topic_parts[1]
        message_type = topic_parts[2]
        
        logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ={device_id}, —Ç–∏–ø={message_type}")
        
        if message_type == "status":
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            try:
                data = json.loads(payload_str)
                
                # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô MAPPING –ü–û–õ–ï–ô (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –∏–º–µ–Ω)
                device_type = data.get('t', data.get('type', 'unknown'))
                ip_address = data.get('ip', 'unknown')
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                attributes = {
                    'mac': data.get('mac', ''),
                    'rssi': data.get('rssi', 0),
                    'free_heap': data.get('heap', data.get('free_heap', 0)),
                    'uptime': data.get('up', data.get('uptime', 0)),
                    'version': data.get('ver', data.get('version', 'unknown')),
                    'firmware': data.get('fw', data.get('firmware', 'unknown')),
                    'config_mode': data.get('cfg', data.get('config_mode', False)),
                    'mqtt_broker': data.get('mqtt', data.get('mqtt_broker', '')),
                    'led_state': data.get('led_s', data.get('led_state', True)),
                    # –ü–æ–ª—è –¥–ª—è RGB —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    'action_button_pressed': data.get('btn', data.get('action_button_pressed', False)),
                    'led_on': data.get('led', data.get('led_on', True)),
                    'rgb_color': data.get('rgb', data.get('rgb_color', '0,0,0')),
                    'available': data.get('avail', data.get('available', True))
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç {device_id}: type={device_type}, ip={ip_address}")
                
                storage.add_device(
                    device_id=device_id,
                    device_type=device_type,
                    ip_address=ip_address,
                    attributes=attributes
                )
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç {device_id}: {e}")
                storage.error_count += 1
                storage.log_event(f"–û—à–∏–±–∫–∞ JSON –æ—Ç {device_id}: {str(e)}", 'error')
                
        elif message_type == "data":
            # –î–∞–Ω–Ω—ã–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            try:
                data = json.loads(payload_str)
                storage.update_device(device_id, {
                    'last_data': data,
                    'last_data_time': time.time()
                })
                logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –æ—Ç {device_id}: {data}")
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç {device_id}: {e}")
                
        elif message_type == "button":
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            try:
                data = json.loads(payload_str)
                storage.update_device(device_id, {
                    'action_button_pressed': data.get('action_button_pressed', False),
                    'led_on': data.get('led_on', True),
                    'last_button_time': time.time()
                })
                logger.info(f"üîò –°—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏ –æ—Ç {device_id}: pressed={data.get('action_button_pressed')}")
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç {device_id}: {e}")
                
        elif message_type == "disconnect":
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            storage.remove_device(device_id)
            logger.info(f"üî¥ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {device_id}")
            
        elif message_type == "error":
            # –û—à–∏–±–∫–∞ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            try:
                data = json.loads(payload_str)
                storage.error_count += 1
                error_msg = data.get('error', 'Unknown error')
                storage.log_event(f"–û—à–∏–±–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}: {error_msg}", 'error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç {device_id}: {error_msg}")
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—à–∏–±–∫–∏ –æ—Ç {device_id}: {e}")
                
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {device_id}: {message_type}")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        storage.error_count += 1
        storage.log_event(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ MQTT: {str(e)}", 'error')

def setup_mqtt():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT –∫–ª–∏–µ–Ω—Ç–∞"""
    global mqtt_client
    
    mqtt_client = mqtt.Client()
    mqtt_client.on_connect = on_mqtt_connect
    mqtt_client.on_message = on_mqtt_message
    
    try:
        logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É: {Config.MQTT_BROKER_HOST}:{Config.MQTT_BROKER_PORT}")
        mqtt_client.connect(Config.MQTT_BROKER_HOST, Config.MQTT_BROKER_PORT, Config.MQTT_KEEPALIVE)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º MQTT loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def mqtt_loop():
            try:
                mqtt_client.loop_forever()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ MQTT loop: {e}")
                storage.error_count += 1
        
        mqtt_thread = threading.Thread(target=mqtt_loop, daemon=True)
        mqtt_thread.start()
        
        logger.info("‚úÖ MQTT –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT: {e}")
        storage.error_count += 1
        return False

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html', local_ip=LOCAL_IP)

@app.route('/status')
def status_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return render_template('status.html', local_ip=LOCAL_IP)

@app.route('/commands')
def commands_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥"""
    return render_template('commands.html', local_ip=LOCAL_IP)

@app.route('/devices')
def devices_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
    return render_template('devices.html', local_ip=LOCAL_IP)

# API endpoints
@app.route('/api/devices')
def api_get_devices():
    """API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        online_devices = storage.get_online_devices()
        
        return jsonify({
            'status': 'success',
            'devices': online_devices,
            'stats': storage.get_device_stats(),
            'timestamp': time.time(),
            'mqtt_broker': Config.MQTT_BROKER_HOST
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/device/<device_id>/command', methods=['POST'])
def api_send_command(device_id):
    """API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'status': 'error', 'message': 'No JSON data provided'}), 400
            
        command = data.get('command')
        if not command:
            return jsonify({'status': 'error', 'message': 'Command not specified'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if device_id not in storage.devices:
            return jsonify({'status': 'error', 'message': f'Device {device_id} not found'}), 404
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ MQTT
        topic = f"{Config.DEVICE_TOPIC_PREFIX}/{device_id}/command"
        mqtt_client.publish(topic, json.dumps({
            'command': command,
            'timestamp': time.time(),
            'source': 'web'
        }))
        
        storage.log_event(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {device_id} -> {command}")
        logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {device_id} -> {command}")
        
        return jsonify({
            'status': 'success',
            'message': f'Command sent to {device_id}',
            'device_id': device_id,
            'command': command
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        storage.error_count += 1
        return jsonify({
            'status': 'error', 
            'message': str(e)
        }), 500

@app.route('/api/broadcast', methods=['POST'])
def api_broadcast_command():
    """API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'status': 'error', 'message': 'No JSON data provided'}), 400
            
        command = data.get('command')
        if not command:
            return jsonify({'status': 'error', 'message': 'Command not specified'}), 400
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        online_devices = storage.get_online_devices()
        sent_count = 0
        
        for device in online_devices:
            topic = f"{Config.DEVICE_TOPIC_PREFIX}/{device['id']}/command"
            mqtt_client.publish(topic, json.dumps({
                'command': command,
                'timestamp': time.time(),
                'source': 'broadcast'
            }))
            sent_count += 1
        
        storage.log_event(f"Broadcast –∫–æ–º–∞–Ω–¥–∞: {command} -> {sent_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        logger.info(f"üì¢ Broadcast –∫–æ–º–∞–Ω–¥–∞: {command} -> {sent_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        return jsonify({
            'status': 'success',
            'message': f'Command broadcast to {sent_count} devices',
            'sent_count': sent_count,
            'command': command
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ broadcast –∫–æ–º–∞–Ω–¥—ã: {e}")
        storage.error_count += 1
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/system/status')
def api_system_status():
    """API: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        system_info = storage.get_system_info()
        device_stats = storage.get_device_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        mqtt_connected = mqtt_client and mqtt_client.is_connected()
        
        return jsonify({
            'status': 'success',
            'system': {
                'mqtt_connected': mqtt_connected,
                'web_server': True,
                'uptime': system_info['uptime'],
                'message_count': system_info['message_count'],
                'error_count': system_info['error_count'],
                'mqtt_broker': Config.MQTT_BROKER_HOST
            },
            'devices': device_stats,
            'timestamp': time.time()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/system/events')
def api_system_events():
    """API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        limit = request.args.get('limit', 50, type=int)
        events = storage.event_log[-limit:] if storage.event_log else []
        
        return jsonify({
            'status': 'success',
            'events': events,
            'total_count': len(storage.event_log)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/device/<device_id>/info')
def api_device_info(device_id):
    """API: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    try:
        if device_id not in storage.devices:
            return jsonify({'status': 'error', 'message': 'Device not found'}), 404
        
        device = storage.devices[device_id]
        return jsonify({
            'status': 'success',
            'device': device
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/discover', methods=['POST'])
def api_discover_devices():
    """API: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        discovery_topic = f"{Config.DEVICE_TOPIC_PREFIX}/discovery"
        mqtt_client.publish(discovery_topic, json.dumps({
            'command': 'DISCOVER',
            'timestamp': time.time(),
            'source': 'web'
        }))
        
        storage.log_event("–ó–∞–ø—É—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        logger.info("üîç –ó–∞–ø—É—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        return jsonify({
            'status': 'success',
            'message': 'Device discovery initiated'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/device/<device_id>/set_color', methods=['POST'])
def api_set_device_color(device_id):
    """API: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        data = request.get_json()
        red = data.get('red', 0)
        green = data.get('green', 0)
        blue = data.get('blue', 0)
        
        success = storage.set_device_color(device_id, red, green, blue)
        if success:
            return jsonify({'status': 'success', 'message': f'Color set for {device_id}'})
        else:
            return jsonify({'status': 'error', 'message': f'Failed to set color for {device_id}'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/devices/mix_colors', methods=['POST'])
def api_mix_colors():
    """API: –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤"""
    try:
        result = storage.mix_colors()
        return jsonify(result)
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/device/<device_id>/reset_button', methods=['POST'])
def api_reset_button(device_id):
    """API: –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
    try:
        topic = f"{Config.DEVICE_TOPIC_PREFIX}/{device_id}/command"
        mqtt_client.publish(topic, json.dumps({
            'command': 'RESET_BUTTON',
            'timestamp': time.time()
        }))
        return jsonify({'status': 'success', 'message': f'Button reset for {device_id}'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route('/static/<path:filename>')
def serve_static(filename):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    return send_from_directory('static', filename)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({'status': 'error', 'message': 'Resource not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 Internal Server Error: {error}")
    return jsonify({'status': 'error', 'message': 'Internal server error'}), 500

def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç
        if not setup_mqtt():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å MQTT –∫–ª–∏–µ–Ω—Ç")
            return False
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        logger.info(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{LOCAL_IP}:{Config.WEB_PORT}")
        
        storage.log_event("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
        app.run(
            host=Config.WEB_HOST,
            port=Config.WEB_PORT,
            debug=False,
            threaded=True
        )
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
if __name__ == '__main__':
    start_web_server()